# Practical 3
# a) Develop a spelling correction module using edit distance algorithms.
# b) Integrate the spelling correction module into an Information retrieval system.

def edit_distance(str1, str2):
    m, n = len(str1), len(str2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]  # Create a dp table

    # Base cases: If one string is empty, the edit distance is the length of the other
    for i in range(m + 1):
        dp[i][0] = i
    for j in range(n + 1):
        dp[0][j] = j

    # Fill the DP table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i - 1] == str2[j - 1]:  # If characters match, no edit needed
                dp[i][j] = dp[i - 1][j - 1]
            else:
                # Minimum of insert, delete, or substitute operations
                dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1])

    return dp[m][n]  # Minimum edit distance at the bottom right corner

# Example Usage
str1 = "Sunday"
str2 = "Saturday"
min_edit_distance = edit_distance(str1, str2)
print('Edit distance between "{}" and "{}" is: {}'.format(str1, str2, min_edit_distance))

def editDistance(str1, str2, m, n):
    if m == 0:
        return n
    if n == 0:
        return m
    if str1[m - 1] == str2[n - 1]:
        return editDistance(str1, str2, m - 1, n - 1)
    return 1 + min(editDistance(str1, str2, m, n - 1),
                   editDistance(str1, str2, m - 1, n),
                   editDistance(str1, str2, m - 1, n - 1))

# Example Usage
str1 = "Sunday"
str2 = "Saturday"
min_edit_distance = editDistance(str1, str2, len(str1), len(str2))
print('Edit distance between "{}" and "{}" is: {}'.format(str1, str2, min_edit_distance))


# Dictionary of correctly spelled words
dictionary = {"search", "engine", "example"}

# Spelling correction function
def spell_correct(word):
    # Check if the word is in the dictionary
    if word in dictionary:
        return word

    # If not in the dictionary, find the closest word based on edit distance
    closest_word = min(dictionary, key=lambda x: edit_distance(word, x))

    # If the closest word is within edit distance 1, return it as the corrected word
    if edit_distance(word, closest_word) == 1:
        return closest_word

    # If no close match is found, return the original word
    return word

# Process query function
def process_query(query):
    # Split the query into individual words
    words = query.split()

    # Correct the spelling of each word in the query
    corrected_words = [spell_correct(word) for word in words]

    # Join the corrected words back into a single string
    corrected_query = ' '.join(corrected_words)

    return corrected_query

# Example Usage
def main():
    # User query
    query = "serch enjine exampl"
    print(f"Original Query: {query}")
    # Process the query and correct spelling
    corrected_query = process_query(query)

    # Print corrected query
    print("Corrected Query:", corrected_query)

if __name__ == "__main__":
    main()


